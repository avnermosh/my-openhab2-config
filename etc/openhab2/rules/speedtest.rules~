import org.openhab.core.library.types.DateTimeType
  
rule "Speedtest init"
when
    System started
then {
    if (SpeedtestSummary.state == Uninitialized || SpeedtestSummary.state == "") SpeedtestSummary.postUpdate("⁉ (unknown)")
}
end

rule "Speedtest"
when
      //Time cron "0 0 5 * * ?" or
      //Time cron "0 0 13 * * ?"
      // Time cron "0 0 * * * ?" or

      // every 1 min
      // Time cron "* * * * * ?" or

      // every 5 min ?
      Time cron "*/5 * * * * ?" or Item SpeedtestRerun received command ON
then {
    logInfo("RULE", "--> speedtest executed...")
    // SpeedtestRunning.postUpdate("Running Measurement...")

    logInfo("foo1")

    // // update timestamp for last execution
    // SpeedtestResultDate.postUpdate(new DateTimeType())
    
    // logInfo("foo2")
    // // execute the script, you may have to change the path depending on your system
    // var String speedtestCliOutput = executeCommandLine("/usr/local/bin/speedtest-cli@@--simple", 120*1000)
    
    // // for debugging:
    // //var String speedtestCliOutput = "Ping: 43.32 ms\nDownload: 21.64 Mbit/s\nUpload: 4.27 Mbit/s"
    // //logInfo("RULE", "--> speedtest output:\n" + speedtestCliOutput + "\n\n")
    
    // logInfo("foo3")
    // SpeedtestRunning.postUpdate("Datenauswertung...")
    
    // logInfo("foo4")
    // if (speedtestCliOutput.startsWith("Ping")) {        
    //     logInfo("foo5")
    //     var String[] results = speedtestCliOutput.split("\\r?\\n")
    //     var float ping = new java.lang.Float(results.get(0).split(" ").get(1))
    //     var float down = new java.lang.Float(results.get(1).split(" ").get(1))
    //     var float up   = new java.lang.Float(results.get(2).split(" ").get(1))
    //     SpeedtestResultPing.postUpdate(ping)
    //     SpeedtestResultDown.postUpdate(down)
    //     SpeedtestResultUp.postUpdate(up)
    //     SpeedtestSummary.postUpdate(String::format("ᐁ  %.1f Mbit/s  ᐃ %.1f Mbit/s (%.0f ms)", down, up, ping))
    //     SpeedtestRunning.postUpdate("-")
    //     logInfo("RULE", "--> speedtest finished.")
    // } else {
    //     logInfo("foo6")
    //     SpeedtestResultPing.postUpdate(0)
    //     SpeedtestResultDown.postUpdate(0)
    //     SpeedtestResultUp.postUpdate(0)
    //     SpeedtestSummary.postUpdate("(unbekannt)")
    //     SpeedtestRunning.postUpdate("Error during execution")
    //     logError("RULE", "--> speedtest failed. Output:\n" + speedtestCliOutput + "\n\n")
    // }
    // logInfo("foo7")
    // SpeedtestRerun.postUpdate(OFF)
}
end

